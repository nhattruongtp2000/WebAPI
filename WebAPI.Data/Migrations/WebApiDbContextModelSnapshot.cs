// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data.EF;

namespace WebAPI.Data.Migrations
{
    [DbContext(typeof(WebApiDbContext))]
    partial class WebApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("WebAPI.Data.Entities.ordersDetails", b =>
                {
                    b.Property<string>("idOrder")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("idVoucher")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("totalPrice")
                        .HasColumnType("int");

                    b.HasKey("idOrder");

                    b.ToTable("OrdersDetails");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.ordersList", b =>
                {
                    b.Property<string>("idOrder")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idProduct")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasIndex("idOrder");

                    b.HasIndex("idProduct");

                    b.HasIndex("idUser");

                    b.ToTable("ordersLists");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productBrand", b =>
                {
                    b.Property<string>("idBrand")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("brandDetail")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("brandName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("idBrand");

                    b.ToTable("productBrands");

                    b.HasData(
                        new
                        {
                            idBrand = "1",
                            brandDetail = "Logo",
                            brandName = "Logo"
                        },
                        new
                        {
                            idBrand = "2",
                            brandDetail = "Company",
                            brandName = "Company"
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productCategories", b =>
                {
                    b.Property<string>("idCategory")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("idCategory");

                    b.ToTable("productCategories");

                    b.HasData(
                        new
                        {
                            idCategory = "1",
                            categoryName = "Shoes"
                        },
                        new
                        {
                            idCategory = "2",
                            categoryName = "Shirt"
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productColor", b =>
                {
                    b.Property<string>("idColor")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("colorName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("idColor");

                    b.ToTable("productColors");

                    b.HasData(
                        new
                        {
                            idColor = "ffffff",
                            colorName = "While"
                        },
                        new
                        {
                            idColor = "Red",
                            colorName = "Red"
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productDetail", b =>
                {
                    b.Property<string>("idProductDetail")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("detail")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<DateTime>("expiredSalingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("isSaling")
                        .HasColumnType("int");

                    b.Property<string>("photoReview")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("price")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("salePrice")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("idProductDetail");

                    b.ToTable("productDetails");

                    b.HasData(
                        new
                        {
                            idProductDetail = "1",
                            dateAdded = new DateTime(2019, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            detail = "goood product",
                            expiredSalingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isSaling = 0,
                            photoReview = "yes",
                            price = "1000000",
                            salePrice = "1000000"
                        },
                        new
                        {
                            idProductDetail = "2",
                            dateAdded = new DateTime(2019, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            detail = "goood product",
                            expiredSalingDate = new DateTime(2020, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isSaling = 1,
                            photoReview = "yes",
                            price = "2000000",
                            salePrice = "1000000"
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productPhotos", b =>
                {
                    b.Property<string>("idProductDetail")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("uploadedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("idProductDetail");

                    b.ToTable("productPhotos");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productSize", b =>
                {
                    b.Property<string>("idSize")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("sizeName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("idSize");

                    b.ToTable("productSizes");

                    b.HasData(
                        new
                        {
                            idSize = "1",
                            sizeName = "L"
                        },
                        new
                        {
                            idSize = "2",
                            sizeName = "M"
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productTypes", b =>
                {
                    b.Property<string>("idType")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("idType");

                    b.ToTable("productTypes");

                    b.HasData(
                        new
                        {
                            idType = "1",
                            typeName = "Cheap"
                        },
                        new
                        {
                            idType = "2",
                            typeName = "Expensive"
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Entities.products", b =>
                {
                    b.Property<string>("idProduct")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idBrand")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idCategory")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idColor")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idProductDetail")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idSize")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("ordersDetailsidOrder")
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("idProduct");

                    b.HasIndex("idBrand");

                    b.HasIndex("idCategory");

                    b.HasIndex("idColor");

                    b.HasIndex("idProductDetail");

                    b.HasIndex("idSize");

                    b.HasIndex("idType");

                    b.HasIndex("ordersDetailsidOrder");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            idProduct = "001",
                            idBrand = "1",
                            idCategory = "1",
                            idColor = "ffffff",
                            idProductDetail = "1",
                            idSize = "1",
                            idType = "1"
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Entities.rating", b =>
                {
                    b.Property<string>("idUser")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("idProduct")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("rateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idUser");

                    b.HasIndex("idProduct");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.users", b =>
                {
                    b.Property<string>("idUser")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("address")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("interestedIn")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("lastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("note")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("province")
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("idUser");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.vouchers", b =>
                {
                    b.Property<string>("idVoucher")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("isUse")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasKey("idVoucher");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.ordersList", b =>
                {
                    b.HasOne("WebAPI.Data.Entities.ordersDetails", "OrdersDetails")
                        .WithMany()
                        .HasForeignKey("idOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.products", "Products")
                        .WithMany()
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.users", "Users")
                        .WithMany()
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdersDetails");

                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productPhotos", b =>
                {
                    b.HasOne("WebAPI.Data.Entities.productDetail", "ProductDetail")
                        .WithMany("productPhotos")
                        .HasForeignKey("idProductDetail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.products", b =>
                {
                    b.HasOne("WebAPI.Data.Entities.productBrand", "ProductBrand")
                        .WithMany("Products")
                        .HasForeignKey("idBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.productCategories", "ProductCategories")
                        .WithMany("Products")
                        .HasForeignKey("idCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.productColor", "ProductColor")
                        .WithMany("Products")
                        .HasForeignKey("idColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.productDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("idProductDetail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.productSize", "ProductSize")
                        .WithMany("Products")
                        .HasForeignKey("idSize")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.productTypes", "ProductTypes")
                        .WithMany("Products")
                        .HasForeignKey("idType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.ordersDetails", null)
                        .WithMany("products")
                        .HasForeignKey("ordersDetailsidOrder");

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductDetail");

                    b.Navigation("ProductSize");

                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.rating", b =>
                {
                    b.HasOne("WebAPI.Data.Entities.productDetail", "ProductDetail")
                        .WithMany("Ratings")
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.Entities.users", "Users")
                        .WithMany("Ratings")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.ordersDetails", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productCategories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productColor", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productDetail", b =>
                {
                    b.Navigation("productPhotos");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.productTypes", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAPI.Data.Entities.users", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
